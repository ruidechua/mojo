module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output p1sc[5],
    output p1sr[7],
    output p1ogc[5],
    output p1ogr[7],
    output p1orc[5],
    output p1orr[7],
    output p2sc[5],
    output p2sr[7],
    output p2ogc[5],
    output p2ogr[7],
    output p2orc[5],
    output p2orr[7]

    
  ) {
  
  sig rst;                  // reset signal
  sig p1own[5][7], p1opp[5][7];
  sig p2own[5][7], p2opp[5][7];
    
  var i,j;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  

  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    p1sc = 0;
    p1sr = 0;
    p1ogc= 0; 
    p1ogr= 0;
    p1orc = 0;
    p1orr = 0;
    p2sc = 0;
    p2sr= 0;
    p2ogc= 0;
    p2ogr= 0;
    p2orc= 0;
    p2orr= 0;
    p1own = 5x{{7b0}};
    p1opp = 5x{{7b0}};
    p2own = 5x{{7b0}};
    p2opp = 5x{{7b0}};
    

}
}