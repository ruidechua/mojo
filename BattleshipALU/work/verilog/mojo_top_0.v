/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [4:0] p1sc,
    output reg [6:0] p1sr,
    output reg [4:0] p1ogc,
    output reg [6:0] p1ogr,
    output reg [4:0] p1orc,
    output reg [6:0] p1orr,
    output reg [4:0] p2sc,
    output reg [6:0] p2sr,
    output reg [4:0] p2ogc,
    output reg [6:0] p2ogr,
    output reg [4:0] p2orc,
    output reg [6:0] p2orr,
    input p1left,
    input p1right,
    input p1Up,
    input p1Dn,
    input p1Etr,
    input p2Lft,
    input p2Rgt,
    input p2Up,
    input p2Dn,
    input p2Etr
  );
  
  
  
  reg rst;
  
  reg [104:0] p1own;
  reg [104:0] p1opp;
  
  reg [104:0] p2own;
  reg [104:0] p2opp;
  
  reg [6:0] move;
  
  wire [5-1:0] M_dm1_greenc;
  wire [7-1:0] M_dm1_greenr;
  wire [5-1:0] M_dm1_redc;
  wire [7-1:0] M_dm1_redr;
  reg [105-1:0] M_dm1_confirmed;
  reg [5-1:0] M_dm1_tempc;
  reg [7-1:0] M_dm1_tempr;
  reg [1-1:0] M_dm1_activate;
  dotMatrix_1 dm1 (
    .clk(clk),
    .rst(rst),
    .confirmed(M_dm1_confirmed),
    .tempc(M_dm1_tempc),
    .tempr(M_dm1_tempr),
    .activate(M_dm1_activate),
    .greenc(M_dm1_greenc),
    .greenr(M_dm1_greenr),
    .redc(M_dm1_redc),
    .redr(M_dm1_redr)
  );
  
  integer i;
  integer j;
  
  reg [24:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  
  always @* begin
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    move = {3'h7{M_counter_q[10+0-:1]}};
    p1sc = M_dm1_greenc;
    p1sr = M_dm1_greenr;
    p1ogc = 1'h0;
    p1ogr = 1'h0;
    p1orc = 1'h0;
    p1orr = move;
    p2sc = 1'h0;
    p2sr = move;
    p2ogc = 1'h0;
    p2ogr = 1'h0;
    p2orc = 1'h0;
    p2orr = move;
    p1own = 105'h000000000000000000000000000;
    p1opp = 105'h000000000000000000000000000;
    p2own = 105'h000000000000000000000000000;
    p2opp = 105'h000000000000000000000000000;
    p1own[63+12+2-:3] = 3'h1;
    p1own[84+18+2-:3] = 3'h1;
    p1own[21+6+2-:3] = 3'h4;
    p1own[42+3+2-:3] = 3'h4;
    M_dm1_activate = 1'h1;
    M_dm1_confirmed = p1own;
    M_dm1_tempc = 5'h00;
    M_dm1_tempr = 7'h00;
    M_counter_d = M_counter_q + 1'h1;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
