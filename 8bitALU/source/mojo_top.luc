module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
    
  ) {

  sig rst;                  // reset signal
  sig a[8];
  sig b[8];
  sig alufn[6];
  sig out[8];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  mojo_adder add;
  cmp8 comp;
  boolean boo;
  shifter shift;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    a[7:0] = io_dip[0][7:0];          //map first 8 DIP to a
    b[7:0] = io_dip[1][7:0];          //map second 8 DIP to b
    alufn[5:0] = io_dip[2][5:0]; //map third 6 DIP to alufn
    
    //adder components
    add.a = a;
    add.b = b;
    add.alufn0 = alufn[0];
    
    //comparator components
    comp.v = add.v;
    comp.n = add.n;
    comp.z = add.z;
    comp.alufn = alufn;
    
    //boolean components
    boo.a = a;
    boo.b = b;
    boo.alufn = alufn[3:0];
    
    //shifter components
    shift.a = a;
    shift.b = b[2:0];
    shift.alufn = alufn[1:0];
    
    
    //mux them togather  
    case(alufn[5:4]){
    b00:
    out = add.sum; //when 00
    b11:
    out = comp.out; //when 11
    b01:
    io_led[0] = boo.boole; //when 01
    b10:
    out = shift.shift; //when 10
    }
    
    io_led[2][0] = add.n;
    io_led[2][1] = add.v;
    io_led[2][2] = add.z;
    
    io_led[0] = out;
  }
}